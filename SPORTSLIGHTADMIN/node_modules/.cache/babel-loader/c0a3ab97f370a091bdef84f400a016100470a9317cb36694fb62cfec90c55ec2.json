{"ast":null,"code":"// // 어디에 접근해서 어떤 데이터를 가지고 와야 하는지 정의\n\n// import axios from \"axios\";\n// import { baseURL } from \"../../apiurl\";\n// import { boardReducers } from \"../reducers/board_reducer\";\n// //\n// function getBoardList(currentPage) {\n//   // 함수명 없이 바로 사용한다.\n//   // board_reducer에 있는 친구를 사용한다.\n//   return async (dispatch) => {\n//     ////경로를 써준다...백엔드를 요청하고 결과값을 받을때까지 기다린다.(await)\n//     const data = await axios\n//       .get(`${baseURL}/board/list/${currentPage}`)\n//       .then((response) => response.data); // 넘겨주는 값을 받을 때는 무조건 response.data를 사용한다.\n\n//     console.log(data);\n//     dispatch(boardReducers.getBoardList({ data }));\n//   };\n// }\n\n// function getBoardDetail(num) {\n//   return async (dispatch) => {\n//     //data 값을 reduce를 이용해서 store에 저장해야함\n//     const data = await axios\n//       .get(`${baseURL}/board/view/${num}`)\n//       .then((response) => response.data); // backend에서 /board/view/ 이렇게 요청하도록 되어있어서 이렇게 주소를 써줌 -> 결과값을 받아옴 .then()\n//     dispatch(boardReducers.getBoardDetail({ data }));\n//   };\n// }\n\n// //backend에서 결과값을 받아야하니 변수를 선언해주어야함\n// function getBoardDownload(upload) {\n//   return async (dispatch) => {\n//     const data = await axios\n//       .get(`${baseURL}/board/contentdownload/${upload}`, {\n//         responseType: \"blob\", // backend에서 stream을 통해서 받도록 \"application/octet-stream\" 이렇게 해두어서 이렇게 받아줘야함\n//       })\n//       .then((response) => response.data); // data에 담아서 넘겨줌\n//     // data 값을 reduce에 저장시켜줘야함 -> store에 저장하기 위해서\n//     //dispatch(boardActions.getBoardDownload(data)); // 이렇게 넘겨줘도 가능\n//     return data; // store에 저장안하고 일회성으로 할 거면 이렇게 하고 board_view.js에서만 사용하게끔 할 수 있음\n//   };\n// }\n\n// function getBoardDelete(num) {\n//   return async (dispatch) => {\n//     await axios\n//       .delete(`${baseURL}/board/delete/${num}`)\n//       .then((response) => response.data);\n//   };\n// }\n\n// function getBoardWrite(formData, config) {\n//   return async () => {\n//     await axios\n//       .post(`${baseURL}/board/write`, formData, config)\n//       .then((response) => response.data);\n//   };\n// }\n\n// function getBoardUpdate(formData, config) {\n//   return async () => {\n//     await axios\n//       .put(`${baseURL}/board/update`, formData, config)\n//       .then((response) => response.data);\n//   };\n// }\n\n// // 어디에 있는거를 호출하는지 이름으로 구분 가능하다. 어느 라이브러리에 있는 어느 함수인지\n// export const boardActions = {\n//   getBoardList,\n//   getBoardDetail,\n//   getBoardDownload,\n//   getBoardDelete,\n//   getBoardWrite,\n//   getBoardUpdate,\n// };\n\n// // 바로 호출할거면\n// // export const getBoardList; // 이런 식으로 쓰는듯\nimport { boardReducers } from \"../reducers/board_reducer\";\nimport axios from \"axios\";\nimport { baseURL, baseUrl } from \"../../apiurl\";\nfunction getBoardList(currentPage) {\n  return async dispatch => {\n    const data = await axios.get(`${baseUrl}/board/list/${currentPage}`) //backend요청\n    .then(response => response.data); //연결해준 값은 data로 받아옴\n    console.log(data);\n    dispatch(boardReducers.getBoardList({\n      data\n    })); //이름과 값이 같으면 이렇게 넘겨도 됨 ({data})\n  };\n}\n\n//db접근 처리\nfunction getBoardDetail(num) {\n  return async dispatch => {\n    const data = await axios.get(`${baseUrl}/board/view/${num}`).then(response => response.data);\n    dispatch(boardReducers.getBoardDetail({\n      data\n    }));\n  };\n}\nfunction getBoardDownload(upload) {\n  return async dispatch => {\n    const data = await axios.get(`${baseUrl}/board/contentdownload/${upload}`, {\n      responseType: \"blob\" //스프링부터에 스트림으로 받아야해서 선언해야 함.header(HttpHeaders.CONTENT_TYPE, \"application/octet-stream\")\n    }).then(response => response.data);\n    //dispatch(boardActions.getBoardDownload(data));\n    return data; //board_view에서만 1회성으로 사용하겠다는 의미\n  };\n}\n\nfunction getBoardDelete(num) {\n  return async dispatch => {\n    await axios.delete(`${baseURL}/board/delete/${num}`).then(response => response.data);\n  };\n}\nfunction getBoardWrite(formData, config) {\n  return async () => {\n    await axios.post(`${baseURL}/board/write`, formData, config).then(response => response.data);\n  };\n}\nfunction getBoardUpdate(formData, config) {\n  return async () => {\n    await axios.put(`${baseURL}/board/update`, formData, config).then(response => response.data);\n  };\n}\nexport const boardActions = {\n  getBoardList,\n  getBoardDetail,\n  getBoardDownload,\n  getBoardDelete,\n  getBoardWrite,\n  getBoardUpdate\n};","map":{"version":3,"names":["boardReducers","axios","baseURL","baseUrl","getBoardList","currentPage","dispatch","data","get","then","response","console","log","getBoardDetail","num","getBoardDownload","upload","responseType","getBoardDelete","delete","getBoardWrite","formData","config","post","getBoardUpdate","put","boardActions"],"sources":["C:/k_digital/react_workspace/myapp005_fronted_shop/src/redux/actions/board_action.js"],"sourcesContent":["// // 어디에 접근해서 어떤 데이터를 가지고 와야 하는지 정의\r\n\r\n// import axios from \"axios\";\r\n// import { baseURL } from \"../../apiurl\";\r\n// import { boardReducers } from \"../reducers/board_reducer\";\r\n// //\r\n// function getBoardList(currentPage) {\r\n//   // 함수명 없이 바로 사용한다.\r\n//   // board_reducer에 있는 친구를 사용한다.\r\n//   return async (dispatch) => {\r\n//     ////경로를 써준다...백엔드를 요청하고 결과값을 받을때까지 기다린다.(await)\r\n//     const data = await axios\r\n//       .get(`${baseURL}/board/list/${currentPage}`)\r\n//       .then((response) => response.data); // 넘겨주는 값을 받을 때는 무조건 response.data를 사용한다.\r\n\r\n//     console.log(data);\r\n//     dispatch(boardReducers.getBoardList({ data }));\r\n//   };\r\n// }\r\n\r\n// function getBoardDetail(num) {\r\n//   return async (dispatch) => {\r\n//     //data 값을 reduce를 이용해서 store에 저장해야함\r\n//     const data = await axios\r\n//       .get(`${baseURL}/board/view/${num}`)\r\n//       .then((response) => response.data); // backend에서 /board/view/ 이렇게 요청하도록 되어있어서 이렇게 주소를 써줌 -> 결과값을 받아옴 .then()\r\n//     dispatch(boardReducers.getBoardDetail({ data }));\r\n//   };\r\n// }\r\n\r\n// //backend에서 결과값을 받아야하니 변수를 선언해주어야함\r\n// function getBoardDownload(upload) {\r\n//   return async (dispatch) => {\r\n//     const data = await axios\r\n//       .get(`${baseURL}/board/contentdownload/${upload}`, {\r\n//         responseType: \"blob\", // backend에서 stream을 통해서 받도록 \"application/octet-stream\" 이렇게 해두어서 이렇게 받아줘야함\r\n//       })\r\n//       .then((response) => response.data); // data에 담아서 넘겨줌\r\n//     // data 값을 reduce에 저장시켜줘야함 -> store에 저장하기 위해서\r\n//     //dispatch(boardActions.getBoardDownload(data)); // 이렇게 넘겨줘도 가능\r\n//     return data; // store에 저장안하고 일회성으로 할 거면 이렇게 하고 board_view.js에서만 사용하게끔 할 수 있음\r\n//   };\r\n// }\r\n\r\n// function getBoardDelete(num) {\r\n//   return async (dispatch) => {\r\n//     await axios\r\n//       .delete(`${baseURL}/board/delete/${num}`)\r\n//       .then((response) => response.data);\r\n//   };\r\n// }\r\n\r\n// function getBoardWrite(formData, config) {\r\n//   return async () => {\r\n//     await axios\r\n//       .post(`${baseURL}/board/write`, formData, config)\r\n//       .then((response) => response.data);\r\n//   };\r\n// }\r\n\r\n// function getBoardUpdate(formData, config) {\r\n//   return async () => {\r\n//     await axios\r\n//       .put(`${baseURL}/board/update`, formData, config)\r\n//       .then((response) => response.data);\r\n//   };\r\n// }\r\n\r\n// // 어디에 있는거를 호출하는지 이름으로 구분 가능하다. 어느 라이브러리에 있는 어느 함수인지\r\n// export const boardActions = {\r\n//   getBoardList,\r\n//   getBoardDetail,\r\n//   getBoardDownload,\r\n//   getBoardDelete,\r\n//   getBoardWrite,\r\n//   getBoardUpdate,\r\n// };\r\n\r\n// // 바로 호출할거면\r\n// // export const getBoardList; // 이런 식으로 쓰는듯\r\nimport { boardReducers } from \"../reducers/board_reducer\";\r\nimport axios from \"axios\";\r\nimport { baseURL, baseUrl } from \"../../apiurl\";\r\n\r\nfunction getBoardList(currentPage) {\r\n  return async (dispatch) => {\r\n    const data = await axios\r\n      .get(`${baseUrl}/board/list/${currentPage}`) //backend요청\r\n      .then((response) => response.data); //연결해준 값은 data로 받아옴\r\n    console.log(data);\r\n    dispatch(boardReducers.getBoardList({ data })); //이름과 값이 같으면 이렇게 넘겨도 됨 ({data})\r\n  };\r\n}\r\n\r\n//db접근 처리\r\nfunction getBoardDetail(num) {\r\n  return async (dispatch) => {\r\n    const data = await axios\r\n      .get(`${baseUrl}/board/view/${num}`)\r\n      .then((response) => response.data);\r\n    dispatch(boardReducers.getBoardDetail({ data }));\r\n  };\r\n}\r\n\r\nfunction getBoardDownload(upload) {\r\n  return async (dispatch) => {\r\n    const data = await axios\r\n      .get(`${baseUrl}/board/contentdownload/${upload}`, {\r\n        responseType: \"blob\", //스프링부터에 스트림으로 받아야해서 선언해야 함.header(HttpHeaders.CONTENT_TYPE, \"application/octet-stream\")\r\n      })\r\n      .then((response) => response.data);\r\n    //dispatch(boardActions.getBoardDownload(data));\r\n    return data; //board_view에서만 1회성으로 사용하겠다는 의미\r\n  };\r\n}\r\n\r\nfunction getBoardDelete(num) {\r\n  return async (dispatch) => {\r\n    await axios\r\n      .delete(`${baseURL}/board/delete/${num}`)\r\n      .then((response) => response.data);\r\n  };\r\n}\r\n\r\nfunction getBoardWrite(formData, config) {\r\n  return async () => {\r\n    await axios\r\n      .post(`${baseURL}/board/write`, formData, config)\r\n      .then((response) => response.data);\r\n  };\r\n}\r\n\r\nfunction getBoardUpdate(formData, config) {\r\n  return async () => {\r\n    await axios\r\n      .put(`${baseURL}/board/update`, formData, config)\r\n      .then((response) => response.data);\r\n  };\r\n}\r\nexport const boardActions = {\r\n  getBoardList,\r\n  getBoardDetail,\r\n  getBoardDownload,\r\n  getBoardDelete,\r\n  getBoardWrite,\r\n  getBoardUpdate,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}