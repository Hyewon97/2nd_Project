{"ast":null,"code":"// 리덕스 툴킷을 이용해서 작업을 한다.\nimport { createSlice } from \"@reduxjs/toolkit\";\nlet initialState = {\n  boardList: [],\n  // boardList로 DB에 있는 값을 긁어온다\n  pv: {\n    currentPage: 1\n  },\n  boardDetail: {},\n  boardFile: null\n};\n\n// state 값, 그 값을 받아서 처리해줄 함수를 설정한다.\nconst boardSlice = createSlice({\n  // 초기값 설정\n  name: \"board\",\n  initialState,\n  reducers: {\n    //\n    // DB에서 받아온 결과값을 action에 넘겨준다. action 인자값은 2개지만 선언할 때 한번만 선언을 한다. reducer 등록할 때 설정해주면 됨.\n    // ...state 했던거를 안해줘도 된다.\n    getBoardList(state, action) {\n      // 데이터를 action이 받음. action.payload로 받음\n      console.log(action);\n      state.boardList = action.payload.data.aList;\n\n      // 스프링 부트 보드 컨트롤에서 pv로 보드 리스트를 보내기 때문에 위는 정보(aList), 아래는 페이지 정보(pv)를 담는다.\n\n      state.pv = action.payload.data.pv;\n    }\n  }\n});\n\n// 이것을 이용해서 함수명 자동완성을 할 수 있다.\n//\n// action에서 getBoardList를 호출해서 값을 넘겨줘야 함.\n//이걸 선언을 안해면  boardSlice.actions.getBoardList.. 이런식으로 사용해야 함.\nexport const boardReducers = boardSlice.actions;\nexport default boardSlice.reducer; // getBoardList을 웹에서 사용할 수 있도록 하는 코드","map":{"version":3,"names":["createSlice","initialState","boardList","pv","currentPage","boardDetail","boardFile","boardSlice","name","reducers","getBoardList","state","action","console","log","payload","data","aList","boardReducers","actions","reducer"],"sources":["C:/k_digital/react_workspace/myapp005_fronted_shop/src/redux/reducers/board_reducer.js"],"sourcesContent":["// 리덕스 툴킷을 이용해서 작업을 한다.\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nlet initialState = {\r\n  boardList: [], // boardList로 DB에 있는 값을 긁어온다\r\n  pv: { currentPage: 1 },\r\n  boardDetail: {},\r\n  boardFile: null,\r\n};\r\n\r\n// state 값, 그 값을 받아서 처리해줄 함수를 설정한다.\r\nconst boardSlice = createSlice({\r\n  // 초기값 설정\r\n  name: \"board\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    //\r\n    // DB에서 받아온 결과값을 action에 넘겨준다. action 인자값은 2개지만 선언할 때 한번만 선언을 한다. reducer 등록할 때 설정해주면 됨.\r\n    // ...state 했던거를 안해줘도 된다.\r\n    getBoardList(state, action) {\r\n      // 데이터를 action이 받음. action.payload로 받음\r\n      console.log(action);\r\n      state.boardList = action.payload.data.aList;\r\n\r\n      // 스프링 부트 보드 컨트롤에서 pv로 보드 리스트를 보내기 때문에 위는 정보(aList), 아래는 페이지 정보(pv)를 담는다.\r\n\r\n      state.pv = action.payload.data.pv;\r\n    },\r\n  },\r\n});\r\n\r\n// 이것을 이용해서 함수명 자동완성을 할 수 있다.\r\n//\r\n// action에서 getBoardList를 호출해서 값을 넘겨줘야 함.\r\n//이걸 선언을 안해면  boardSlice.actions.getBoardList.. 이런식으로 사용해야 함.\r\nexport const boardReducers = boardSlice.actions;\r\nexport default boardSlice.reducer; // getBoardList을 웹에서 사용할 수 있도록 하는 코드\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,IAAIC,YAAY,GAAG;EACjBC,SAAS,EAAE,EAAE;EAAE;EACfC,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAE,CAAC;EACtBC,WAAW,EAAE,CAAC,CAAC;EACfC,SAAS,EAAE;AACb,CAAC;;AAED;AACA,MAAMC,UAAU,GAAGP,WAAW,CAAC;EAC7B;EACAQ,IAAI,EAAE,OAAO;EACbP,YAAY;EAEZQ,QAAQ,EAAE;IACR;IACA;IACA;IACAC,YAAYA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC1B;MACAC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACnBD,KAAK,CAACT,SAAS,GAAGU,MAAM,CAACG,OAAO,CAACC,IAAI,CAACC,KAAK;;MAE3C;;MAEAN,KAAK,CAACR,EAAE,GAAGS,MAAM,CAACG,OAAO,CAACC,IAAI,CAACb,EAAE;IACnC;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMe,aAAa,GAAGX,UAAU,CAACY,OAAO;AAC/C,eAAeZ,UAAU,CAACa,OAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}